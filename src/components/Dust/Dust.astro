---
interface Props {
  class: string;
}

const { class: className } = Astro.props;
---

<canvas id="dust" class={className}></canvas>

<script>
  import { CIRCLE_RENDER_RULES } from "./const";
  import { CircleRenderer } from "./renderers";
  import type { Renderer } from "./renderers";
  import { State } from "./state";
  import {
    EntitiesBoundariesSystem,
    EntitiesMovementSystem,
    EntitiesRandomSpawnSystem,
    EntitiesRespawnSystem,
  } from "./systems";
  import type { System } from "./systems";
  import { engine } from "./engine";
  import { generateCircles, Vector2 } from "./utils";

  const canvas = document.getElementById("dust") as HTMLCanvasElement;
  const updateCanvasSize = (size: Vector2) => {
    canvas.width = size.x;
    canvas.height = size.y;
  };
  const context = canvas.getContext("2d")!;

  const boundaries = new Vector2(window.innerWidth, window.innerHeight);
  updateCanvasSize(boundaries);

  const state = new State(
    [
      ...generateCircles(5, 2),
      ...generateCircles(15, 1),
      ...generateCircles(40, 0.5),
    ],
    boundaries,
    50,
  );

  const renderers: Renderer[] = [new CircleRenderer(CIRCLE_RENDER_RULES)];

  const systems: System[] = [
    new EntitiesRandomSpawnSystem(),
    new EntitiesMovementSystem(),
    new EntitiesBoundariesSystem(),
    new EntitiesRespawnSystem(),
  ];

  function handleResize() {
    state.boundaries = new Vector2(window.innerWidth, window.innerHeight);
    updateCanvasSize(state.boundaries);
  }
  window.addEventListener("resize", handleResize);

  engine({
    renderers,
    systems,
    state,
    context,
  });
</script>
